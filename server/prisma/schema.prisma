generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  id        BigInt    @id @default(autoincrement())
  name      String    @unique(map: "name") @map("name") @db.VarChar(255)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  processes Process[]

  @@map("area")
}

model Process {
  id            BigInt            @id @default(autoincrement())
  name          String            @db.VarChar(255)
  description   String?           @db.Text
  documentation String?           @db.Text
  tools         String?           @db.Text
  areaId        BigInt            @map("area_id")
  parentId      BigInt?           @map("parent_id")
  status        process_status?   @default(Ativo)
  priority      process_priority? @default(Media)
  type          process_type?     @default(Manual)
  startDate     DateTime?         @map("start_date") @db.Date
  endDate       DateTime?         @map("end_date") @db.Date
  createdAt     DateTime?         @default(now()) @map("created_at") @db.Timestamp(0)
  area          Area              @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "process_ibfk_1")
  parent        Process?          @relation("ProcessToProcess", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "process_ibfk_2")
  children      Process[]         @relation("ProcessToProcess")
  responsibles  Responsible[]

  @@index([areaId], map: "area_id")
  @@index([parentId], map: "parent_id")
  @@map("process")
}

model Responsible {
  processId            BigInt             @map("process_id")
  organizationalUnitId BigInt             @map("organizational_unit_id")
  createdAt            DateTime?          @default(now()) @map("created_at") @db.Timestamp(0)
  process              Process            @relation(fields: [processId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "responsible_ibfk_1")
  organizationalUnit   OrganizationalUnit @relation(fields: [organizationalUnitId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "responsible_ibfk_2")

  @@id([processId, organizationalUnitId])
  @@index([organizationalUnitId], map: "organizational_unit_id")
  @@map("responsible")
}

model OrganizationalUnit {
  id           BigInt               @id @default(autoincrement())
  name         String               @db.VarChar(255)
  parentId     BigInt?              @map("parent_id")
  createdAt    DateTime?            @default(now()) @map("created_at") @db.Timestamp(0)
  parent       OrganizationalUnit?  @relation("OrgUnitHierarchy", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "organizational_unit_ibfk_1")
  children     OrganizationalUnit[] @relation("OrgUnitHierarchy")
  responsibles Responsible[]

  @@index([parentId], map: "parent_id")
  @@map("organizational_unit")
}

enum process_status {
  Ativo
  Em_Desenvolvimento @map("Em Desenvolvimento")
  Descontinuado
}

enum process_priority {
  Alta
  Media
  Baixa
}

enum process_type {
  Sistemico
  Manual
}
